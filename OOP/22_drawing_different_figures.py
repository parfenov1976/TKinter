"""
Пример рисования фигур различных форм
"""

from tkinter import Tk, Canvas, Frame, BOTH


class Example(Frame):
    """
    Класс приложения с наследованием от родительского класса виджета Frame
    """
    def __init__(self, parent: Tk) -> None:
        """
        Конструктор класса приложения.
        :param parent: параметр для передачи ссылки на главное окно приложения
        """
        Frame.__init__(self)  # вызов конструктора родительского класса
        self.parent = parent  # сохранение ссылки на главное окно приложения в атрибуте его объекта
        self.init_ui()  # вызов метода инициализации графического интерфейса приложения

    def init_ui(self) -> None:
        self.parent.title('Цвета')  # присвоение имени главному окну приложения
        self.pack(fill=BOTH, expand=1)  # размещение главной рамки в главном окне с заполнением
        # по горизонтали и вертикали с установкой разрешения на растяжение
        # Если не поставить fill=BOTH, то холст не будет растягиваться более некоторого размера по умолчанию
        # Если не поставить expand=1, то холст будет растягиваться только по горизонтали
        canvas = Canvas(self)  # создание холста
        canvas.create_oval(                         # создание овала на холсте
            10, 10, 80, 80,              # координаты NW точки и SE точки ограничивающего прямоугольника x1, y1, x2, y2
            outline='#f11', fill='#1f1', width=2   # outline - цвет контура, fill - цвет заполнения,
        )                                          # width - толщина контура
        canvas.create_oval(  # создание овала на холсте
            110, 10, 210, 80,  # координаты NW точки и SE точки ограничивающего прямоугольника x1, y1, x2, y2
            outline='#f11', fill='#1f1', width=2  # outline - цвет контура, fill - цвет заполнения,
        )  # width - толщина контура
        canvas.create_rectangle(                    # создание прямоугольника на холсте
            230, 10, 290, 60,                       # координаты NW точки и SE точки прямоугольника x1, y1, x2, y2
            outline='#f11', fill='#1f1', width=2    # outline - цвет контура, fill - цвет заполнения
        )                                           # width - толщина контура
        canvas.create_arc(  # создание дуги на холсте
            30, 200, 90, 100, start=0, extent=210,  # координаты NW точки и SE точки ограничивающего прямоугольника x1, y1, x2, y2
            outline='#f11', fill='#1f1', width=2  # start - устанавливает начало угла дуги, extent - указывает размер угла
        )  # outline - цвет контура, fill - цвет заполнения, width - толщина контура
        points = [
            150, 100, 200, 120, 240, 180, 210,
            200, 150, 150, 100, 200
        ]  # список координат вершин многоугольника
        canvas.create_polygon(points, outline='#f11', fill='#1f1', width=2)  # создание многоугольника
        canvas.pack(fill=BOTH, expand=1)


def main() -> None:
    """
    Функция с кодом приложения верхнего уровня
    """
    root = Tk()  # создание главного окна приложения
    app = Example(root)  # создание объекта приложения с передачей ссылки на главное окно приложения
    root.geometry('330x220+300+300')  # размещение главного окна приложения с указанием размеров и координат NW угла
    root.mainloop()  # запуск главного цикла приложения


if __name__ == '__main__':  # условия проверки для предотвращения запуска кода верхнего уровня при импортировании
    # данного файла как модуля
    main()  # вызов функции с кодом верхнего уровня
