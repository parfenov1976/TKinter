"""
Пример использования виджета Label (ярлык)
"""
from PIL import Image, ImageTk
from tkinter import Tk
from tkinter.ttk import Frame, Label
import sys


class Example(Frame):
    """
    Класс приложения от родительского класса виджета Frame
    """
    def __init__(self, parent):
        """
        Конструктор приложения.
        :param parent: ссылка на основное окно
        """
        Frame.__init__(self)  # вызов конструктора родительского класса для создания рамки
        self.parent = parent  # сохранение ссылки на основное окно
        self.img = None  # создаем аттрибут объекта для хранения изображения
        self.load_image()  # вызов метода загрузки изображения
        self.init_ui()  # вызов метода построения интерфейса

    def load_image(self):
        """
        Метод загрузки файла изображения
        """
        try:
            self.img = Image.open('tatras.jpg')  # создаем изображение из файла
        except IOError:
            print('Возникла ошибка во время открытия изображения!')
            sys.exit(1)

    def init_ui(self):
        """
        Метод инициализации интерфейса приложения
        """
        self.parent.title('Ярлык')  # устанавливаем название основного окна
        tatras = ImageTk.PhotoImage(self.img)  # создаем фото изображения из изображения
        label = Label(self, image=tatras)  # фотоизображению присваиваем параметр image виджета Label
        label.image = tatras  # сохраняем ссылку на изображение, чтобы сборщик мусора его не закрыл
        label.pack()  # размещаем ярлык в главной рамке основного окна с помощью менеджера геометрии pack
        self.pack()  # размещаем главную рамку в основном окне с помощью менеджера геометрии pack

    def set_geometry(self):
        """
        Метод, устанавливающий размеры окна приложения.
        """
        w, h = self.img.size  # передаем параметры размера изображения в переменные для установки размера окна
        self.parent.geometry(f'{w}x{h}+300+300')  # установка размеров окна и его размещение с помощью метода geometry()


def main():
    """
    Функция запуска кода верхнего уровня
    """
    root = Tk()  # создание главного окна приложения
    app = Example(root)  # создание экземпляра приложения с передачей ссылка на главное окно
    app.set_geometry()  # вызов метода установки размеров окна и его размещения
    root.mainloop()  # запуск основного цикла главного окна


if __name__ == '__main__':  # данная конструкция предотвращает запуск main при импортировании данного файла как модуля
    main()
