"""
Пример использования виджета Spinbox
"""
import tkinter as tk


class Example(tk.Frame):
    """
    Подкласс приложения с наследованием от родительского класса Frame
    """

    def __init__(self, parent: tk) -> None:
        """
        Конструктор класса приложения.
        :param parent: параметр для передачи ссылки на главное окно приложения
        """
        tk.Frame.__init__(self)  # вызов конструктора родительского класса
        self.parent = parent  # сохранение ссылки на главное окно приложения в параметрах экземпляра приложения
        self.var = tk.DoubleVar(value=1)  # указание типа переменной для переменной спинбокса и начального значения
        # по умолчанию начальное значение равно 0,0
        self.spin = tk.Spinbox(self, textvariable=self.var, from_=-2, to=2, width=5,
                               increment=0.1,
                               command=self.display_select)  # создание спинбокса в главном окне приложения
        # from_ задает начало отсчета, to задает конец отсчета, width задает ширину спинбокса в символах
        self.lbl = tk.Label(self, text=f'Selected: {self.var.get()}')  # создание ярлыка для вывода значения спинбокса
        self.init_ui()  # вызов метода инициализации графического интерфейса

    def init_ui(self) -> None:
        """
        Метод инициализации графического интерфейса
        """
        self.parent.title('Пример спинбокса')
        self.pack(fill=tk.BOTH)  # размещение главной рамки в главном окне
        self.spin.grid(column=0, row=0)  # размещение спинбокса в окне приложения с помощью менеджера геометрии grid
        self.lbl.grid(column=0, row=1)  # размещение ярлыка в главном окне приложения с помощью менеджера геометрии grid

    def display_select(self) -> None:
        """
        Функция, извлекающая значение из переменной спинбокса и выводящая его на ярлык
        """
        self.lbl.config(text=f'Selected: {self.var.get()}')  # извлечение значения из переменной спинбокса
        # с помощью метода get() вывод его в ярлык с помощью метода config() ярлыка


def main():
    """
    Функция запуска кода верхнего уровня приложения
    """
    root = tk.Tk()  # создание главного окна приложения
    root.geometry('400x250')  # установка размера главного окна и его размещение
    app = Example(root)  # создание экземпляра приложения с передачей ссылки на главное окно
    root.mainloop()  # запуск основного цикла главного окна приложения


if __name__ == '__main__':  # данная конструкция предотвращает запуск main при импортировании данного файла как модуля
    main()
